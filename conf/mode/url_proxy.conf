# 根据URL二级目录实现动态反向代理功能，使用Redis存储URL二级目录和代理地址的对应关系。
# 可通过后台调整Redis数据，实现准实时的动态代理配置，增删改查可代理的二级目录地址。
# 
# 例如
# http://www.xxx.com/aaa -> http://10.31.16.10:8080/AAAA
# http://www.xxx.com/bbb -> http://10.31.20.18:7001/BBBB
# http://www.xxx.com/ccc -> http://10.31.78.49:9999/CCCC
# Redis数据
# aaa : "http://10.31.16.10:8080/AAAA"
# bbb : "http://10.31.20.18:7001/BBBB"
# ccc : "http://10.31.78.49:9999/CCCC"

server {
	# 端口号
	listen 80;
	
	# 泛域名匹配（所有）
	server_name _;
	
	# 匹配所有进入的链接，并截取二级目录字符串，并进行代理转发，多个匹配的代理识别逻辑一致
	
	# 匹配URL中[不仅]包含二级目录的URL字符串
	location ~ /(.+)/(.*) {
		# 获取二级目录字符串
		set $root_path $1;
		
		# 建立代理地址变量
		set $dynamic_proxy_path "";
		
		# 进行权限控制识别，并进行代理地址设定（当前不控制权限，仅通过此方式绕过set_by_lua_file调用Redis的异常）
		access_by_lua_file "./lua/access_proxy.lua";
		
		# 执行代理转发
		proxy_pass $dynamic_proxy_path;
	}
	
	# 匹配URL中[仅]包含二级目录的URL字符串
	location ~ /(.+) {
		# 获取二级目录字符串
		set $root_path $1;
		
		# 建立代理地址变量
		set $dynamic_proxy_path "";
		
		# 进行权限控制识别，并进行代理地址设定（当前不控制权限，仅通过此方式绕过set_by_lua_file调用Redis的异常）
		access_by_lua_file "./lua/access_proxy.lua";
		
		# 执行代理转发
		proxy_pass $dynamic_proxy_path;
	}
	
	# 无法找到代理的默认处理
	location ^~ /errorproxy {
		echo "Can not find the Proxy Server config ! Please check the URL !";
	}
}